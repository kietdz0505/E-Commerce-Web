import React, { useState, useEffect } from "react";
import { useParams } from "react-router-dom";
import apiClient from "../api/axiosInstance";
import { getApiUrl } from "../config/apiConfig";

const OrderDetail = () => {
  const { id } = useParams();
  const [order, setOrder] = useState(null);
  const [editMode, setEditMode] = useState(false);
  const [loading, setLoading] = useState(false); // üî• th√™m loading

  useEffect(() => {
    const fetchOrder = async () => {
      try {
        const res = await apiClient.get(getApiUrl("GET_ORDER_BY_ID", id));
        setOrder(res.data);
      } catch (err) {
        console.error("L·ªói khi l·∫•y chi ti·∫øt ƒë∆°n h√†ng:", err);
      }
    };
    fetchOrder();
  }, [id]);

  const handleSave = async () => {
    setLoading(true); // üî• b·∫Øt ƒë·∫ßu loading
    try {
      const payload = {
        receiverName: order.receiverName,
        receiverPhone: order.receiverPhone,
        deliveryAddress: order.deliveryAddress,
        paymentMethod: order.paymentMethod,
        promotionCode: order.promotionCode,
        items: order.items?.map((item) => ({
          productId: item.productId,
          quantity: item.quantity,
          unitPrice: item.unitPrice,
          discountedUnitPrice: item.discountedUnitPrice,
        })),
      };

      const res = await apiClient.put(getApiUrl("UPDATE_ORDER_INFO", id), payload);
      setOrder(res.data);
      setEditMode(false);
      alert("‚úÖ C·∫≠p nh·∫≠t ƒë∆°n h√†ng th√†nh c√¥ng!");
    } catch (err) {
      console.error("L·ªói khi c·∫≠p nh·∫≠t ƒë∆°n h√†ng:", err);
      alert("‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ƒë∆°n h√†ng");
    } finally {
      setLoading(false); // üî• k·∫øt th√∫c loading
    }
  };

  if (!order) return <p className="text-center mt-5">‚è≥ ƒêang t·∫£i ƒë∆°n h√†ng...</p>;

  const getStatusBadge = (status) => {
    switch (status) {
      case "PENDING":
        return <span className="badge bg-warning text-dark">Ch·ªù x·ª≠ l√Ω</span>;
      case "COMPLETED":
        return <span className="badge bg-success">Ho√†n th√†nh</span>;
      case "CANCELLED":
        return <span className="badge bg-danger">ƒê√£ h·ªßy</span>;
      default:
        return <span className="badge bg-secondary">{status}</span>;
    }
  };

  return (
    <div className="container mt-4">
      <div className="card shadow p-4">
        <h3 className="mb-3">üõí ƒê∆°n h√†ng #{order.id}</h3>

        {/* Th√¥ng tin ƒë∆°n h√†ng */}
        <div className="row">
          <div className="col-md-6 mb-3">
            <label className="form-label fw-bold">T√™n ng∆∞·ªùi nh·∫≠n</label>
            <input
              type="text"
              className="form-control"
              value={order.receiverName || ""}
              onChange={(e) => setOrder({ ...order, receiverName: e.target.value })}
              disabled={!editMode}
            />
          </div>

          <div className="col-md-6 mb-3">
            <label className="form-label fw-bold">S·ªë ƒëi·ªán tho·∫°i</label>
            <input
              type="text"
              className="form-control"
              value={order.receiverPhone || ""}
              onChange={(e) => setOrder({ ...order, receiverPhone: e.target.value })}
              disabled={!editMode}
            />
          </div>
        </div>

        <div className="mb-3">
          <label className="form-label fw-bold">ƒê·ªãa ch·ªâ giao h√†ng</label>
          <input
            type="text"
            className="form-control"
            value={order.deliveryAddress || ""}
            onChange={(e) => setOrder({ ...order, deliveryAddress: e.target.value })}
            disabled={!editMode}
          />
        </div>

        <div className="mt-3">
          <p>
            <strong>Ph∆∞∆°ng th·ª©c thanh to√°n:</strong> {order.paymentMethod}
          </p>
          <p>
            <strong>Tr·∫°ng th√°i:</strong> {getStatusBadge(order.status)}
          </p>
          <p>
            <strong>Ng√†y ƒë·∫∑t:</strong>{" "}
            {new Date(order.orderDate).toLocaleString("vi-VN")}
          </p>
          <p>
            <strong>M√£ khuy·∫øn m√£i:</strong>{" "}
            <span className="text-primary">
              {order.promotionCode || "Kh√¥ng c√≥"}
            </span>
          </p>
          <h4 className="text-success fw-bold">
            T·ªïng ti·ªÅn:{" "}
            {order.totalAmount !== undefined
              ? Number(order.totalAmount).toLocaleString("vi-VN") + " VND"
              : "0 VND"}
          </h4>
        </div>

        <div className="mt-4">
          {editMode ? (
            <button
              className="btn btn-success"
              onClick={handleSave}
              disabled={loading} // üî• kh√≥a n√∫t khi loading
            >
              {loading ? (
                <>
                  <span
                    className="spinner-border spinner-border-sm me-2"
                    role="status"
                  ></span>
                  ƒêang l∆∞u...
                </>
              ) : (
                "üíæ L∆∞u thay ƒë·ªïi"
              )}
            </button>
          ) : (
            <button className="btn btn-warning" onClick={() => setEditMode(true)} disabled={order.status !== "PENDING"}>
              ‚úèÔ∏è Ch·ªânh s·ª≠a ƒë∆°n h√†ng
            </button>
          )}
        </div>
      </div>

      {/* B·∫£ng s·∫£n ph·∫©m */}
      <div className="card shadow p-4 mt-4">
        <h5>üì¶ S·∫£n ph·∫©m trong ƒë∆°n h√†ng</h5>
        <table className="table table-hover mt-3 align-middle">
          <thead className="table-light">
            <tr>
              <th>S·∫£n ph·∫©m</th>
              <th>S·ªë l∆∞·ª£ng</th>
              <th>ƒê∆°n gi√° g·ªëc</th>
              <th>ƒê∆°n gi√° sau gi·∫£m</th>
              <th>Th√†nh ti·ªÅn</th>
            </tr>
          </thead>
          <tbody>
            {order.items?.map((item, index) => {
              const unitPrice = Number(item.unitPrice || 0);
              const discountedPrice = Number(item.discountedUnitPrice || 0);
              return (
                <tr key={index}>
                  <td>{item.productName}</td>
                  <td>{item.quantity}</td>
                  <td>{unitPrice.toLocaleString("vi-VN")} VND</td>
                  <td>{discountedPrice.toLocaleString("vi-VN")} VND</td>
                  <td className="fw-bold text-end text-success">
                    {(discountedPrice * item.quantity).toLocaleString("vi-VN")} VND
                  </td>
                </tr>
              );
            })}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default OrderDetail;
